import java.util.*;import java.awt.Color;//Controle grillepublic class ControleGrille  {	private final int NBCASESLARGEUR;	private final int NBCASESLONGUEUR;	private Color[][] grille;	private Tetraminos tetraminoActuel;	private Tetraminos tetraminoPrecedentePosition;	private Tetraminos tetraminoHold;	private Tetraminos tetraminoSuivant;	GestionTetraminos gestionTetraminos=new GestionTetraminos();	public ControleGrille(int largeur, int longueur){		NBCASESLARGEUR=largeur+2;		NBCASESLONGUEUR=longueur+1;	}		public void initialiserGrille(){		grille=new Color[NBCASESLONGUEUR][NBCASESLARGEUR];		for(int i=0;i<grille.length-1;i++){			for(int j=0;j<grille[i].length;j++){				if(j==0||j==grille[i].length-1){					grille[i][j]=Color.gray;				}else{					grille[i][j]=Color.black;				}			}		}		for(int k=0;k<NBCASESLARGEUR;k++){			grille[NBCASESLONGUEUR-1][k]=Color.gray;		}		initialiserTetramino();	}		public void initialiserTimer(){		Timer chrono = new Timer();		chrono.schedule(new TimerTask(){			public void run(){				Descendre();			}		},1000,1000);	}			public void initialiserTetramino(){		tetraminoActuel=tetraminoSuivant;		tetraminoActuel.origineTetramino=new Point(5,1);		tetraminoSuivant=gestionTetraminos.TetraminoAleatoire();		MettreAJourGrille();	}		public String ToString(){		String s=new String();		for(int i=0;i<grille.length;i++){			for(int j=0; j<grille[i].length;j++){				s=s+grille[i][j]+" ";			}			s=s+"\n";		}		return s;	}  	public boolean ObjetDessous(){		int i=0;		boolean t = false;		while(!t && i<tetraminoActuel.coordsTetrimino.length){			if (grille[tetraminoActuel.origineTetramino.y+tetraminoActuel.coordsTetrimino[i].y+1][tetraminoActuel.origineTetramino.x+tetraminoActuel.coordsTetrimino[i].x]!=Color.black){				for(int j=0;j<tetraminoActuel.coordsTetrimino.length;j++){					if(tetraminoActuel.origineTetramino.y+tetraminoActuel.coordsTetrimino[i].y+1!=tetraminoActuel.origineTetramino.y+tetraminoActuel.coordsTetrimino[j].y&&tetraminoActuel.origineTetramino.x+tetraminoActuel.coordsTetrimino[i].x!=tetraminoActuel.origineTetramino.x+tetraminoActuel.coordsTetrimino[j].x){//teste si le carré du tetramino qui interfère n'est pas à lui même						t = true;					}				}							}						i++;		}        return t;	}		public boolean ObjetDroite(){		int i=0;		boolean t = false;		while(!t && i<tetraminoActuel.coordsTetrimino.length){			if (grille[tetraminoActuel.origineTetramino.y+tetraminoActuel.coordsTetrimino[i].y][tetraminoActuel.origineTetramino.x+tetraminoActuel.coordsTetrimino[i].x+1]!=Color.black){				for(int j=0;j<tetraminoActuel.coordsTetrimino.length;j++){					if(tetraminoActuel.origineTetramino.y+tetraminoActuel.coordsTetrimino[i].y!=tetraminoActuel.origineTetramino.y+tetraminoActuel.coordsTetrimino[j].y&&tetraminoActuel.origineTetramino.x+tetraminoActuel.coordsTetrimino[i].x+1!=tetraminoActuel.origineTetramino.x+tetraminoActuel.coordsTetrimino[j].x){//teste si le carré du tetramino qui interfère n'est pas à lui même						t = true;					}				}							}						i++;		}        return t;	}		public boolean ObjetGauche(){		int i=0;		boolean t = false;		while(!t && i<tetraminoActuel.coordsTetrimino.length){			if (grille[tetraminoActuel.origineTetramino.y+tetraminoActuel.coordsTetrimino[i].y][tetraminoActuel.origineTetramino.x+tetraminoActuel.coordsTetrimino[i].x-1]!=Color.black){				for(int j=0;j<tetraminoActuel.coordsTetrimino.length;j++){					if(tetraminoActuel.origineTetramino.y+tetraminoActuel.coordsTetrimino[i].y!=tetraminoActuel.origineTetramino.y+tetraminoActuel.coordsTetrimino[j].y&&tetraminoActuel.origineTetramino.x+tetraminoActuel.coordsTetrimino[i].x-1!=tetraminoActuel.origineTetramino.x+tetraminoActuel.coordsTetrimino[j].x){//teste si le carré du tetramino qui interfère n'est pas à lui même						t = true;					}				}							}						i++;		}        return t;	}		public void Descendre() {		if(!ObjetDessous()){			tetraminoPrecedentePosition=tetraminoActuel;			tetraminoActuel.origineTetramino=new Point(tetraminoActuel.origineTetramino.x,tetraminoActuel.origineTetramino.y+1);			MettreAJourGrille();		}	}  	public void DeplacementADroite() {		tetraminoPrecedentePosition=tetraminoActuel;		tetraminoActuel.origineTetramino=new Point(tetraminoActuel.origineTetramino.x+1,tetraminoActuel.origineTetramino.y);		MettreAJourGrille();	}    	public void DeplacementAGauche() {		tetraminoPrecedentePosition=tetraminoActuel;		tetraminoActuel.origineTetramino=new Point(tetraminoActuel.origineTetramino.x-1,tetraminoActuel.origineTetramino.y);		MettreAJourGrille();	}  		public void RotationGauche(){		tetraminoPrecedentePosition=tetraminoActuel;		if(tetraminoActuel.couleurTetra != Color.yellow){			for (int i = 0; i < 4; ++i) {				tetraminoActuel.coordsTetrimino[i].x=tetraminoActuel.coordsTetrimino[i].y;				tetraminoActuel.coordsTetrimino[i].y=-tetraminoActuel.coordsTetrimino[i].x;			}		}		MettreAJourGrille();	}		public void RotationDroite(){		tetraminoPrecedentePosition=tetraminoActuel;		if(tetraminoActuel.couleurTetra != Color.yellow){			for (int i = 0; i < 4; ++i) {				tetraminoActuel.coordsTetrimino[i].x=-tetraminoActuel.coordsTetrimino[i].y;				tetraminoActuel.coordsTetrimino[i].y=tetraminoActuel.coordsTetrimino[i].x;								}		}		MettreAJourGrille();	}	public LinkedList LigneComplete(){		LinkedList <Integer> lignesASupprimer=new LinkedList<Integer>();;		for(int i=0;i<grille.length;i++){			int j=0;			while(j<grille[i].length||grille[i][j]!=Color.black){				j++;			}			if (j==grille[i].length){				lignesASupprimer.add(j);			}		}		return lignesASupprimer;	}		public void SupprimerLigne(int ligneASupprimer){		for(int i=ligneASupprimer;i<0;i--){			for(int j=1;j<grille[ligneASupprimer].length-1;j++){				grille[i][j]=grille[i-1][j];			}		}	}			public void MettreAJourGrille(){		for(int i=0;i<tetraminoPrecedentePosition.coordsTetrimino.length;i++){			grille[tetraminoPrecedentePosition.origineTetramino.y+tetraminoPrecedentePosition.coordsTetrimino[i].y][tetraminoPrecedentePosition.origineTetramino.x+tetraminoPrecedentePosition.coordsTetrimino[i].x]=Color.black;		}		for(int i=0;i<tetraminoActuel.coordsTetrimino.length;i++){			grille[tetraminoActuel.origineTetramino.y+tetraminoActuel.coordsTetrimino[i].y][tetraminoActuel.origineTetramino.x+tetraminoActuel.coordsTetrimino[i].x]=tetraminoActuel.couleurTetra;		}	}								 	 	 }